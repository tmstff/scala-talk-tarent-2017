| \b\*Case Classes, Pattern Matching & Immutability

1) Case Classes
2) Pattern Matching
3) Immutability
4) Feedback

---
| \b\* CASE CLASSES - Declaration & Initialization

| Declaration

```
case class Product (id: Int, category: String)

case class Order (id: Int, products: List[Product] = Nil)

case class User (name: String, orders: List[Order] = Nil)
```

--

| Initialization

```
val user = User(
  name = "Arnold",
  orders = List(
    Order( id = 1, products = List(
      Product( id = 1, category = "Tools" )))))
```

---
| \b\* CASE CLASSES - Methods

| Copy

```
val user2 = user.copy( name = "Arni" )
```

--

| toString()

```
println(s"user2='$user2'")
val userString = user.toString()
```

--

| equals() & hashCode()

```
println(user == user.copy())
println(user == user2)
println(s"h1: ${user.hashCode()}, h2: ${user2.hashCode()}")
```

---
| \b\* CASE CLASSES - equals() & hashCode()

| Properties can be excluded from equals() & hashCode():

```
case class Foo(a: Int)(b: Int)
println( Foo(0)(0) == Foo(0)(1) )
println( Seq(0, 1).map(Foo(0)(_).hashCode) )

```

---
| \b\* PATTERN MATCHING

```
def describe(x: String) = x match {
//.     matching expression
//.     |
//.     |         result, in case it's a match
//.     |         |
  case "Hallo" => "some hello"
  case "Hallo Welt" => "some hello world"
}
```
--

```
describe("Hallo Welt")
```
--

```
describe("Hallo")
```
--

```
describe("Foo")
```
---
| \*\b PATTERN MATCHING constant pattern + wildcard pattern


```
def describe2(x: Any) = x match {
  case 10 => "ten"
  case true | false => "boolean"
  case "hello" => "hi!"
  case Nil => "empty List"
  case _   => "something else"  //<--- wildcard pattern with default value
}
```
--

```
describe2(10)
```
--

```
describe2(true)
```
--

```
describe2(Unit)
```


---
| PATTERN MATCHING constructor pattern


```
case class Driver(name: String, age: Integer, sex: String)

case class Car(brand: String, driver: Driver)

val car1 = Car("Ferrari", Driver("Michael", 65, "male"))
val car2 = Car("Ford", Driver("Michael", 65, "male"))
val car3 = Car("BMW", Driver("Michaela", 23, "female"))
val car4 = Car("VW", Driver("Tim", 17, "male"))

def insurance(car: Car) = car match {
  case Car(_, Driver(name, age, _)) if age < 18 => throw new RuntimeException(s"$name is too young to drive!")
  case Car("Ferrari", Driver(_, age, "male"))   => 1500 * (100 - age) / 100
  case Car(_, Driver(_, age, "male"))           => 1200 * (100 - age) / 100
  case car                                      => 1000 * (100 - car.driver.age) / 100
}

```

---
| \b\* PATTERN MATCHING lists


```
def concat(l: List[String]): String = l match {
  case Nil => ""
  case elem :: tail => elem + concat(tail)
}

concat(List("A", "B", "C"))
```


---
| \b\* PATTERN MATCHING tuples

```
val tuple = ("a", 'b', 4711)

val first = tuple._1
val second = tuple._2
val third = tuple._3
```

--

```
(1, 2, 3) match {
  case (_, _, 2) => println("_, _, 2")
  case (_, 2, 4) => println("_, 2, 4")
  case (1, _, _) => println("1, _, _")
}
```

---
| \b\* PATTERN MATCHING patterns everywhere

```
def getTuple(): (String, Int) = ("hallo", 123)
val (string, number) = getTuple()

println(string)
println(number)
```

--

```
def getDriver() = Driver("Michael", 65, "male")
val Driver(name, age, _) = getDriver()
println(s"$name, $age")
```

---
| \b\* IMMUTABILITY - why?

| less side effects!

consider

```
val d = Driver("Michael", 65, "male")
val result = someObj.doSomethingWith(d)
```

| no shared state
=> easier parallelization
- no need for mutexes, locks etc
- no deadlocks

---
| \b\* IMMUTABILITY - how to deal with state & side-effects

| what to do with my state then?

- keep it in datastores accessible by all instances (e.g. postgres, redis)

--

| and side-effects (e.g. ui, db-access etc)

- keep them in the "Interface Adapters" Layer for Controllers, Gateways & Presenters,
  see https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html

--

| but I need state for my code

- try to solve things with recursion & functional style programming
  - tail-recursive functions are converted to a loop internally

- there are situations where it is necessary - or at least much easier - to have state
  - scala gives you the choice

---
| \b\* IMMUTABILITY vals and vars

```
val x = 1
var y = 1
```

--

```
y = 2
```
--

```
x = 2
```

--

For case classes "val" is the default!

---
| \b\* IMMUTABILITY lists


```
val immutableList = List(1,2,3)
import scala.collection.mutable
val mutableList = mutable.MutableList(1)
```

--

```
mutableList += 1
```

--

```
mutableList ++= immutableList
```

--

```
immutableList += 1
```

--

```
immutableList.add(1)
```

--

```
val il2 = 1 :: immutableList
val il3 = il2 ++ List(6)
val il4 = immutableList ++ mutableList
val il5 = immutableList
```
